//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Packages/com.envalys.mr-projection-tools/Runtime/Scripts/CameraInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInput"",
    ""maps"": [
        {
            ""name"": ""Bird's Eye Camera"",
            ""id"": ""aaa0c972-9907-46cf-9738-9d49de18b4ca"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""c7fc0f57-b0cd-4aa1-af5a-ebd96a8172e5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""755e601c-9c8d-4a70-a225-11bfb134025c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""120b5adf-cdf1-4623-b939-9d0cd05a05bc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""984b2949-8246-46b0-aeb5-16d03fca4fd8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap"",
                    ""type"": ""Button"",
                    ""id"": ""dfe89591-3aef-4732-98dd-3b2f7360bf11"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ad1ec416-32e0-4cb2-b7d5-8b25c13c3e4d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""35bad579-64f7-40e5-b404-f9ec8a93af8a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1620e55e-44ab-41bf-955e-e82d3088edd1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2ff55e22-e9ac-4e4f-94f1-6d2670b23bd1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5e59cab6-f67d-42df-ad38-f10714b2112a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""619a393c-4dc6-4e3c-8622-ecf95808c916"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4fdc3637-0f7a-4dbb-b408-4291c455f6c6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2be48547-e38d-49d8-9ee5-341118d41845"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fe8702b9-de4d-4d58-a0d7-8cc7c3c27c38"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a0ea547-8101-42b9-92d7-57f0f31ab06a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef28b7c6-d5e8-4bd4-92df-0091e44739bb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5589948c-04b2-4a86-aa31-665ae7659c3a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20369159-02e5-46e2-999f-3e6439cc6f03"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Bird's Eye Camera
        m_BirdsEyeCamera = asset.FindActionMap("Bird's Eye Camera", throwIfNotFound: true);
        m_BirdsEyeCamera_Zoom = m_BirdsEyeCamera.FindAction("Zoom", throwIfNotFound: true);
        m_BirdsEyeCamera_Move = m_BirdsEyeCamera.FindAction("Move", throwIfNotFound: true);
        m_BirdsEyeCamera_Reset = m_BirdsEyeCamera.FindAction("Reset", throwIfNotFound: true);
        m_BirdsEyeCamera_Exit = m_BirdsEyeCamera.FindAction("Exit", throwIfNotFound: true);
        m_BirdsEyeCamera_Swap = m_BirdsEyeCamera.FindAction("Swap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bird's Eye Camera
    private readonly InputActionMap m_BirdsEyeCamera;
    private List<IBirdsEyeCameraActions> m_BirdsEyeCameraActionsCallbackInterfaces = new List<IBirdsEyeCameraActions>();
    private readonly InputAction m_BirdsEyeCamera_Zoom;
    private readonly InputAction m_BirdsEyeCamera_Move;
    private readonly InputAction m_BirdsEyeCamera_Reset;
    private readonly InputAction m_BirdsEyeCamera_Exit;
    private readonly InputAction m_BirdsEyeCamera_Swap;
    public struct BirdsEyeCameraActions
    {
        private @CameraInput m_Wrapper;
        public BirdsEyeCameraActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_BirdsEyeCamera_Zoom;
        public InputAction @Move => m_Wrapper.m_BirdsEyeCamera_Move;
        public InputAction @Reset => m_Wrapper.m_BirdsEyeCamera_Reset;
        public InputAction @Exit => m_Wrapper.m_BirdsEyeCamera_Exit;
        public InputAction @Swap => m_Wrapper.m_BirdsEyeCamera_Swap;
        public InputActionMap Get() { return m_Wrapper.m_BirdsEyeCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BirdsEyeCameraActions set) { return set.Get(); }
        public void AddCallbacks(IBirdsEyeCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_BirdsEyeCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BirdsEyeCameraActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @Swap.started += instance.OnSwap;
            @Swap.performed += instance.OnSwap;
            @Swap.canceled += instance.OnSwap;
        }

        private void UnregisterCallbacks(IBirdsEyeCameraActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @Swap.started -= instance.OnSwap;
            @Swap.performed -= instance.OnSwap;
            @Swap.canceled -= instance.OnSwap;
        }

        public void RemoveCallbacks(IBirdsEyeCameraActions instance)
        {
            if (m_Wrapper.m_BirdsEyeCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBirdsEyeCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_BirdsEyeCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BirdsEyeCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BirdsEyeCameraActions @BirdsEyeCamera => new BirdsEyeCameraActions(this);
    public interface IBirdsEyeCameraActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnSwap(InputAction.CallbackContext context);
    }
}
